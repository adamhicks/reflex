// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.22.2
// source: exserver.proto

package exserverpb

import (
	context "context"
	reflexpb "github.com/luno/reflex/reflexpb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EchoMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *EchoMsg) Reset() {
	*x = EchoMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_exserver_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EchoMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EchoMsg) ProtoMessage() {}

func (x *EchoMsg) ProtoReflect() protoreflect.Message {
	mi := &file_exserver_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EchoMsg.ProtoReflect.Descriptor instead.
func (*EchoMsg) Descriptor() ([]byte, []int) {
	return file_exserver_proto_rawDescGZIP(), []int{0}
}

func (x *EchoMsg) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_exserver_proto protoreflect.FileDescriptor

var file_exserver_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x65, 0x78, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0a, 0x65, 0x78, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x70, 0x62, 0x1a, 0x2c, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x75, 0x6e, 0x6f, 0x2f, 0x72, 0x65,
	0x66, 0x6c, 0x65, 0x78, 0x2f, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x78, 0x70, 0x62, 0x2f, 0x72, 0x65,
	0x66, 0x6c, 0x65, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x23, 0x0a, 0x07, 0x45, 0x63,
	0x68, 0x6f, 0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32,
	0xba, 0x01, 0x0a, 0x08, 0x45, 0x78, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x0c,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x31, 0x12, 0x17, 0x2e, 0x72,
	0x65, 0x66, 0x6c, 0x65, 0x78, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x78, 0x70, 0x62,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x00, 0x30, 0x01, 0x12, 0x3c, 0x0a, 0x0c, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x32, 0x12, 0x17, 0x2e, 0x72, 0x65, 0x66,
	0x6c, 0x65, 0x78, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x78, 0x70, 0x62, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x22, 0x00, 0x30, 0x01, 0x12, 0x32, 0x0a, 0x04, 0x45, 0x63, 0x68, 0x6f,
	0x12, 0x13, 0x2e, 0x65, 0x78, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x70, 0x62, 0x2e, 0x45, 0x63,
	0x68, 0x6f, 0x4d, 0x73, 0x67, 0x1a, 0x13, 0x2e, 0x65, 0x78, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x70, 0x62, 0x2e, 0x45, 0x63, 0x68, 0x6f, 0x4d, 0x73, 0x67, 0x22, 0x00, 0x42, 0x3d, 0x5a, 0x3b,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x75, 0x6e, 0x6f, 0x2f,
	0x72, 0x65, 0x66, 0x6c, 0x65, 0x78, 0x2f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x65, 0x78, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2f, 0x65, 0x78, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_exserver_proto_rawDescOnce sync.Once
	file_exserver_proto_rawDescData = file_exserver_proto_rawDesc
)

func file_exserver_proto_rawDescGZIP() []byte {
	file_exserver_proto_rawDescOnce.Do(func() {
		file_exserver_proto_rawDescData = protoimpl.X.CompressGZIP(file_exserver_proto_rawDescData)
	})
	return file_exserver_proto_rawDescData
}

var file_exserver_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_exserver_proto_goTypes = []interface{}{
	(*EchoMsg)(nil),                // 0: exserverpb.EchoMsg
	(*reflexpb.StreamRequest)(nil), // 1: reflexpb.StreamRequest
	(*reflexpb.Event)(nil),         // 2: reflexpb.Event
}
var file_exserver_proto_depIdxs = []int32{
	1, // 0: exserverpb.ExServer.StreamEvent1:input_type -> reflexpb.StreamRequest
	1, // 1: exserverpb.ExServer.StreamEvent2:input_type -> reflexpb.StreamRequest
	0, // 2: exserverpb.ExServer.Echo:input_type -> exserverpb.EchoMsg
	2, // 3: exserverpb.ExServer.StreamEvent1:output_type -> reflexpb.Event
	2, // 4: exserverpb.ExServer.StreamEvent2:output_type -> reflexpb.Event
	0, // 5: exserverpb.ExServer.Echo:output_type -> exserverpb.EchoMsg
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_exserver_proto_init() }
func file_exserver_proto_init() {
	if File_exserver_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_exserver_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EchoMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_exserver_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_exserver_proto_goTypes,
		DependencyIndexes: file_exserver_proto_depIdxs,
		MessageInfos:      file_exserver_proto_msgTypes,
	}.Build()
	File_exserver_proto = out.File
	file_exserver_proto_rawDesc = nil
	file_exserver_proto_goTypes = nil
	file_exserver_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ExServerClient is the client API for ExServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ExServerClient interface {
	StreamEvent1(ctx context.Context, in *reflexpb.StreamRequest, opts ...grpc.CallOption) (ExServer_StreamEvent1Client, error)
	StreamEvent2(ctx context.Context, in *reflexpb.StreamRequest, opts ...grpc.CallOption) (ExServer_StreamEvent2Client, error)
	Echo(ctx context.Context, in *EchoMsg, opts ...grpc.CallOption) (*EchoMsg, error)
}

type exServerClient struct {
	cc grpc.ClientConnInterface
}

func NewExServerClient(cc grpc.ClientConnInterface) ExServerClient {
	return &exServerClient{cc}
}

func (c *exServerClient) StreamEvent1(ctx context.Context, in *reflexpb.StreamRequest, opts ...grpc.CallOption) (ExServer_StreamEvent1Client, error) {
	stream, err := c.cc.NewStream(ctx, &_ExServer_serviceDesc.Streams[0], "/exserverpb.ExServer/StreamEvent1", opts...)
	if err != nil {
		return nil, err
	}
	x := &exServerStreamEvent1Client{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ExServer_StreamEvent1Client interface {
	Recv() (*reflexpb.Event, error)
	grpc.ClientStream
}

type exServerStreamEvent1Client struct {
	grpc.ClientStream
}

func (x *exServerStreamEvent1Client) Recv() (*reflexpb.Event, error) {
	m := new(reflexpb.Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *exServerClient) StreamEvent2(ctx context.Context, in *reflexpb.StreamRequest, opts ...grpc.CallOption) (ExServer_StreamEvent2Client, error) {
	stream, err := c.cc.NewStream(ctx, &_ExServer_serviceDesc.Streams[1], "/exserverpb.ExServer/StreamEvent2", opts...)
	if err != nil {
		return nil, err
	}
	x := &exServerStreamEvent2Client{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ExServer_StreamEvent2Client interface {
	Recv() (*reflexpb.Event, error)
	grpc.ClientStream
}

type exServerStreamEvent2Client struct {
	grpc.ClientStream
}

func (x *exServerStreamEvent2Client) Recv() (*reflexpb.Event, error) {
	m := new(reflexpb.Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *exServerClient) Echo(ctx context.Context, in *EchoMsg, opts ...grpc.CallOption) (*EchoMsg, error) {
	out := new(EchoMsg)
	err := c.cc.Invoke(ctx, "/exserverpb.ExServer/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExServerServer is the server API for ExServer service.
type ExServerServer interface {
	StreamEvent1(*reflexpb.StreamRequest, ExServer_StreamEvent1Server) error
	StreamEvent2(*reflexpb.StreamRequest, ExServer_StreamEvent2Server) error
	Echo(context.Context, *EchoMsg) (*EchoMsg, error)
}

// UnimplementedExServerServer can be embedded to have forward compatible implementations.
type UnimplementedExServerServer struct {
}

func (*UnimplementedExServerServer) StreamEvent1(*reflexpb.StreamRequest, ExServer_StreamEvent1Server) error {
	return status.Errorf(codes.Unimplemented, "method StreamEvent1 not implemented")
}
func (*UnimplementedExServerServer) StreamEvent2(*reflexpb.StreamRequest, ExServer_StreamEvent2Server) error {
	return status.Errorf(codes.Unimplemented, "method StreamEvent2 not implemented")
}
func (*UnimplementedExServerServer) Echo(context.Context, *EchoMsg) (*EchoMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}

func RegisterExServerServer(s *grpc.Server, srv ExServerServer) {
	s.RegisterService(&_ExServer_serviceDesc, srv)
}

func _ExServer_StreamEvent1_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(reflexpb.StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExServerServer).StreamEvent1(m, &exServerStreamEvent1Server{stream})
}

type ExServer_StreamEvent1Server interface {
	Send(*reflexpb.Event) error
	grpc.ServerStream
}

type exServerStreamEvent1Server struct {
	grpc.ServerStream
}

func (x *exServerStreamEvent1Server) Send(m *reflexpb.Event) error {
	return x.ServerStream.SendMsg(m)
}

func _ExServer_StreamEvent2_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(reflexpb.StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExServerServer).StreamEvent2(m, &exServerStreamEvent2Server{stream})
}

type ExServer_StreamEvent2Server interface {
	Send(*reflexpb.Event) error
	grpc.ServerStream
}

type exServerStreamEvent2Server struct {
	grpc.ServerStream
}

func (x *exServerStreamEvent2Server) Send(m *reflexpb.Event) error {
	return x.ServerStream.SendMsg(m)
}

func _ExServer_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExServerServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exserverpb.ExServer/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExServerServer).Echo(ctx, req.(*EchoMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _ExServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "exserverpb.ExServer",
	HandlerType: (*ExServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _ExServer_Echo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamEvent1",
			Handler:       _ExServer_StreamEvent1_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamEvent2",
			Handler:       _ExServer_StreamEvent2_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "exserver.proto",
}
