package reflex

// EventFilter takes a Event and returns true if it should be allowed to be processed or
// false if it shouldn't. It can error if it fails to determine if the event should be processed.
// Please note it is expected that the func should return promptly and as such other than smaller
// in memory transforms/extractions it should not be making any I/O or significant API calls
// (especially remote ones) as the expectation is that the only data needed will be on the event
// itself.
type EventFilter func(event *Event) (bool, error)

// AllEventFilters combines all its supplied EventFilter parameters and generates a single EventFilter
// that return true if all the EventFilter parameters return true and errors if any of them errors.
func AllEventFilters(efs ...EventFilter) EventFilter {
	return func(event *Event) (bool, error) {
		for _, ef := range efs {
			ok, err := ef(event)
			if !ok || err != nil {
				return false, err
			}
		}
		return true, nil
	}
}

// AnyEventFilters combines all its supplied EventFilter parameters and generates a single EventFilter
// that return true if any of the EventFilter parameters return true and otherwise return false together
// with the last error generated by any of the filters.
func AnyEventFilters(efs ...EventFilter) EventFilter {
	return func(event *Event) (bool, error) {
		var lastErr error
		for _, ef := range efs {
			ok, err := ef(event)
			if err != nil {
				lastErr = err
			} else if ok {
				return true, nil
			}
		}
		return false, lastErr
	}
}
