package filters

import "github.com/luno/reflex"

// AllEventFilters combines all its supplied EventFilter parameters and generates a single EventFilter
// that return true if all the EventFilter parameters return true and errors if any of them errors.
func AllEventFilters(efs ...reflex.EventFilter) reflex.EventFilter {
	return func(event *reflex.Event) (bool, error) {
		for _, ef := range efs {
			ok, err := ef(event)
			if !ok || err != nil {
				return false, err
			}
		}
		return true, nil
	}
}

// AnyEventFilters combines all its supplied EventFilter parameters and generates a single EventFilter
// that return true if any of the EventFilter parameters return true and otherwise return false together
// with the last error generated by any of the filters.
func AnyEventFilters(efs ...reflex.EventFilter) reflex.EventFilter {
	return func(event *reflex.Event) (bool, error) {
		var lastErr error
		for _, ef := range efs {
			ok, err := ef(event)
			if err != nil {
				lastErr = err
			} else if ok {
				return true, nil
			}
		}
		return false, lastErr
	}
}
